{"ast":null,"code":"'use strict'; // Import browser version otherwise electron-renderer will end up with node\n// version and fail.\n\nvar _regeneratorRuntime = require(\"E:\\\\Freaks\\\\Nfolio-Script\\\\Script-Files\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\");\n\nvar _asyncToGenerator = require(\"E:/Freaks/Nfolio-Script/Script-Files/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _asyncIterator = require(\"E:/Freaks/Nfolio-Script/Script-Files/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\n\nvar normaliseInput = require('ipfs-core-utils/src/files/normalise-input/index.browser');\n\nvar modeToString = require('./mode-to-string');\n/**\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidateStream} ImportCandidateStream\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidate} ImportCandidate\n */\n\n/**\n * @param {ImportCandidateStream|ImportCandidate} source\n * @param {AbortController} abortController\n * @param {Headers|Record<string, string>} [headers]\n */\n\n\nfunction multipartRequest(_x, _x2) {\n  return _multipartRequest.apply(this, arguments);\n}\n\nfunction _multipartRequest() {\n  _multipartRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(source, abortController) {\n    var headers,\n        parts,\n        formData,\n        index,\n        total,\n        _iteratorAbruptCompletion,\n        _didIteratorError,\n        _iteratorError,\n        _iterator,\n        _step,\n        _step$value,\n        content,\n        path,\n        mode,\n        mtime,\n        fileSuffix,\n        type,\n        fieldName,\n        qs,\n        secs,\n        nsecs,\n        end,\n        _args = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            headers = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n            parts = [];\n            formData = new FormData();\n            index = 0;\n            total = 0; // @ts-ignore wrong input type for normaliseInput\n\n            _iteratorAbruptCompletion = false;\n            _didIteratorError = false;\n            _context.prev = 7;\n            _iterator = _asyncIterator(normaliseInput(source));\n\n          case 9:\n            _context.next = 11;\n            return _iterator.next();\n\n          case 11:\n            if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n              _context.next = 37;\n              break;\n            }\n\n            _step$value = _step.value, content = _step$value.content, path = _step$value.path, mode = _step$value.mode, mtime = _step$value.mtime;\n            fileSuffix = '';\n            type = content ? 'file' : 'dir';\n\n            if (index > 0) {\n              fileSuffix = \"-\".concat(index);\n            }\n\n            fieldName = type + fileSuffix;\n            qs = [];\n\n            if (mode !== null && mode !== undefined) {\n              qs.push(\"mode=\".concat(modeToString(mode)));\n            }\n\n            if (mtime != null) {\n              secs = mtime.secs, nsecs = mtime.nsecs;\n              qs.push(\"mtime=\".concat(secs));\n\n              if (nsecs != null) {\n                qs.push(\"mtime-nsecs=\".concat(nsecs));\n              }\n            }\n\n            if (qs.length) {\n              fieldName = \"\".concat(fieldName, \"?\").concat(qs.join('&'));\n            }\n\n            if (!content) {\n              _context.next = 28;\n              break;\n            }\n\n            formData.set(fieldName, content, path != null ? encodeURIComponent(path) : undefined);\n            end = total + content.size;\n            parts.push({\n              name: path,\n              start: total,\n              end: end\n            });\n            total = end;\n            _context.next = 33;\n            break;\n\n          case 28:\n            if (!(path != null)) {\n              _context.next = 32;\n              break;\n            }\n\n            formData.set(fieldName, new File([''], encodeURIComponent(path), {\n              type: 'application/x-directory'\n            }));\n            _context.next = 33;\n            break;\n\n          case 32:\n            throw new Error('path or content or both must be set');\n\n          case 33:\n            index++;\n\n          case 34:\n            _iteratorAbruptCompletion = false;\n            _context.next = 9;\n            break;\n\n          case 37:\n            _context.next = 43;\n            break;\n\n          case 39:\n            _context.prev = 39;\n            _context.t0 = _context[\"catch\"](7);\n            _didIteratorError = true;\n            _iteratorError = _context.t0;\n\n          case 43:\n            _context.prev = 43;\n            _context.prev = 44;\n\n            if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n              _context.next = 48;\n              break;\n            }\n\n            _context.next = 48;\n            return _iterator.return();\n\n          case 48:\n            _context.prev = 48;\n\n            if (!_didIteratorError) {\n              _context.next = 51;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 51:\n            return _context.finish(48);\n\n          case 52:\n            return _context.finish(43);\n\n          case 53:\n            return _context.abrupt(\"return\", {\n              total: total,\n              parts: parts,\n              headers: headers,\n              body: formData\n            });\n\n          case 54:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[7, 39, 43, 53], [44,, 48, 52]]);\n  }));\n  return _multipartRequest.apply(this, arguments);\n}\n\nmodule.exports = multipartRequest;","map":{"version":3,"sources":["E:/Freaks/Nfolio-Script/Script-Files/node_modules/ipfs-http-client/src/lib/multipart-request.browser.js"],"names":["normaliseInput","require","modeToString","multipartRequest","source","abortController","headers","parts","formData","FormData","index","total","content","path","mode","mtime","fileSuffix","type","fieldName","qs","undefined","push","secs","nsecs","length","join","set","encodeURIComponent","end","size","name","start","File","Error","body","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\n// Import browser version otherwise electron-renderer will end up with node\n// version and fail.\nconst normaliseInput = require('ipfs-core-utils/src/files/normalise-input/index.browser')\nconst modeToString = require('./mode-to-string')\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidateStream} ImportCandidateStream\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidate} ImportCandidate\n */\n\n/**\n * @param {ImportCandidateStream|ImportCandidate} source\n * @param {AbortController} abortController\n * @param {Headers|Record<string, string>} [headers]\n */\nasync function multipartRequest (source, abortController, headers = {}) {\n  const parts = []\n  const formData = new FormData()\n  let index = 0\n  let total = 0\n\n  // @ts-ignore wrong input type for normaliseInput\n  for await (const { content, path, mode, mtime } of normaliseInput(source)) {\n    let fileSuffix = ''\n    const type = content ? 'file' : 'dir'\n\n    if (index > 0) {\n      fileSuffix = `-${index}`\n    }\n\n    let fieldName = type + fileSuffix\n    const qs = []\n\n    if (mode !== null && mode !== undefined) {\n      qs.push(`mode=${modeToString(mode)}`)\n    }\n\n    if ((mtime) != null) {\n      const { secs, nsecs } = (mtime)\n\n      qs.push(`mtime=${secs}`)\n\n      if (nsecs != null) {\n        qs.push(`mtime-nsecs=${nsecs}`)\n      }\n    }\n\n    if (qs.length) {\n      fieldName = `${fieldName}?${qs.join('&')}`\n    }\n\n    if (content) {\n      formData.set(fieldName, content, path != null ? encodeURIComponent(path) : undefined)\n      const end = total + content.size\n      parts.push({ name: path, start: total, end })\n      total = end\n    } else if (path != null) {\n      formData.set(fieldName, new File([''], encodeURIComponent(path), { type: 'application/x-directory' }))\n    } else {\n      throw new Error('path or content or both must be set')\n    }\n\n    index++\n  }\n\n  return {\n    total,\n    parts,\n    headers,\n    body: formData\n  }\n}\n\nmodule.exports = multipartRequest\n"]},"metadata":{},"sourceType":"script"}